"""–ú–æ–¥—É–ª—å –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""

from typing import Literal
from io import BytesIO
from math import ceil
from asyncio import sleep
from discord import Client, Message, Webhook, Interaction, Thread, MessageType, MessageReferenceType, Embed, Member, StickerFormatType, File, HTTPException, AllowedMentions, MessageSnapshot, SelectOption, ChannelType
from discord.reaction import ReactionType # TODO: temp hack until discord.py 2.6.4
from discord.abc import Messageable
from discord.ui import Modal, Select, ChannelSelect, Label, TextInput
from discord.app_commands import CommandTree
from discord.utils import MISSING # TODO: temp hack until discord.py 2.6.4
from antivand_utils import get_session

# TODO: –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ

# TODO: –≤–µ–±—Ö—É–∫–∏ –Ω–µ –º–æ–≥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (https://github.com/discord/discord-api-docs/discussions/3282) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∏–∫–µ—Ä—ã (https://github.com/discord/discord-api-docs/discussions/4441). —Å–µ–π—á–∞—Å –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–±–µ–¥ –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

# monkeypatching + memory leak
map = {}
def get_author(self):
    return map.get(id(self))
def set_author(self, value):
    map[id(self)] = value
MessageSnapshot.author = property(get_author, set_author)

class MoveError(Exception):
    """–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    def __init__(self, message: str, msg: Message):
        super().__init__(message)
        self.msg = msg

def formatnum(num: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if num % 100 >= 10 and num % 100 < 20:
        return f'{num} —Å–æ–æ–±—â–µ–Ω–∏–π'
    return f'{num} ' + ['—Å–æ–æ–±—â–µ–Ω–∏–π', '—Å–æ–æ–±—â–µ–Ω–∏–µ', '—Å–æ–æ–±—â–µ–Ω–∏—è', '—Å–æ–æ–±—â–µ–Ω–∏—è', '—Å–æ–æ–±—â–µ–Ω–∏—è', '—Å–æ–æ–±—â–µ–Ω–∏–π', '—Å–æ–æ–±—â–µ–Ω–∏–π', '—Å–æ–æ–±—â–µ–Ω–∏–π', '—Å–æ–æ–±—â–µ–Ω–∏–π', '—Å–æ–æ–±—â–µ–Ω–∏–π'][num % 10]

async def move_msg(client: Client, msg: Message, wh: Webhook, dst: Messageable, msgs: dict[int, list[Message]], authors: set[Member]) -> None:
    """–ü–µ—Ä–µ–Ω–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    if msg.poll:
        raise MoveError('–°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º', msg)
    if msg.flags.voice:
        raise MoveError('–°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤—ã–º', msg)

    if msg.type not in [MessageType.default, MessageType.reply]:
        return

    orig_msg = msg
    if msg.reference and msg.reference.type == MessageReferenceType.forward:
        try:
            msg = await client.get_channel(msg.reference.channel_id).fetch_message(msg.reference.message_id)
        except Exception as e:
            author = msg.author
            msg = msg.message_snapshots[0]
            msg.author = author
            msg.content = '‚Ü™ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ:\n' + msg.content

    reply_embed = MISSING
    if msg.type == MessageType.reply:
        orig = msg.reference.resolved
        if isinstance(orig, Message):
            orig_orig = orig
            description = ''
            if orig.reference and orig.reference.type == MessageReferenceType.forward:
                try:
                    orig = await client.get_channel(orig.reference.channel_id).fetch_message(orig.reference.message_id)
                except Exception as e:
                    author = orig.author
                    orig = orig.message_snapshots[0]
                    orig.author = author
                    description = '‚Ü™Ô∏è '
            description += orig.content if len(orig.content) < 100 else orig.content[0:100] + '...'
            if len(orig.attachments) + len(orig.stickers) > 0:
                description += ' üñºÔ∏è'
            jump_msg = msgs[orig_orig.id][0] if orig_orig.id in msgs else orig_orig
            description = f'[–û—Ç–≤–µ—Ç:]({jump_msg.jump_url}) ' + description
            reply_embed = Embed(color=orig.author.color, description=description)
            reply_embed.set_author(name=orig.author.display_name, icon_url=orig.author.display_avatar.url)
        else:
            reply_embed = Embed(description='–û—Ç–≤–µ—Ç')

    all_files = []
    files_embedded = False
    for a in msg.attachments:
        if len(await a.read()) > 10 * 1024 ** 2:
            msg.content += '\n' + (f'||{a.proxy_url}||' if a.is_spoiler() else a.proxy_url)
            files_embedded = True
        else:
            all_files.append(await a.to_file(spoiler=a.is_spoiler()))
    for s in msg.stickers:
        s = await s.fetch()
        if s.format == StickerFormatType.lottie:
            raise MoveError('–°–æ–æ–±—â–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è lottie-—Å—Ç–∏–∫–µ—Ä', msg)
        format = {StickerFormatType.png: 'png', StickerFormatType.apng: 'apng', StickerFormatType.gif: 'gif'}[s.format]
        r = await get_session().get(url=s.url)
        r = await r.read()
        if len(r) <= 10 * 1024 ** 2:
            all_files.append(File(BytesIO(r), filename=s.name + '.' + format, description=s.description))

    non_reply_embeds = files_embedded or len(msg.embeds) > 0
    msgs[orig_msg.id] = []
    for i in range(max(ceil(len(msg.content) / 2000), 1)):
        last = (i + 1) * 2000 >= len(msg.content)
        content = msg.content[i * 2000 : (i + 1) * 2000] # TODO: –≤–æ–∑–º–æ–∂–Ω–æ –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ –¥–µ–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á—Ç–æ–± –Ω–µ –ª–æ–º–∞—Ç—å –Ω–∞–ø—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏ –∏ –¥—Ä—É–≥—É—é —Ä–∞–∑–º–µ—Ç–∫—É
        files = all_files if last else MISSING
        embed = reply_embed if last and not non_reply_embeds else MISSING
        suppress_embeds = not last or (not reply_embed and not non_reply_embeds)
        new_msg = await wh.send(content=content, username=msg.author.display_name, avatar_url=msg.author.display_avatar.url, files=files, embed=embed, suppress_embeds=suppress_embeds, thread=MISSING if not isinstance(dst, Thread) else dst, wait=True)
        msgs[orig_msg.id].append(new_msg)
    if non_reply_embeds and reply_embed:
        new_msg = await wh.send(content=MISSING, username=msg.author.display_name, avatar_url=msg.author.display_avatar.url, embed=reply_embed, thread=MISSING if not isinstance(dst, Thread) else dst, wait=True)
        msgs[orig_msg.id].append(new_msg)

    msg = orig_msg

    if isinstance(msg.author, Member):
        authors.add(msg.author)

    for r in msg.reactions:
        async for user in r.users(type=ReactionType.normal):
            if isinstance(user, Member):
                authors.add(user)
        async for user in r.users(type=ReactionType.burst):
            if isinstance(user, Member):
                authors.add(user)
        try:
            await msgs[orig_msg.id][-1].add_reaction(r)
        except HTTPException as e: # TODO: —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∫–æ–≥–¥–∞ —ç–º–æ–¥–∑–∏ —Ä–µ–∞–∫—Ü–∏–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞. —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–∞–µ–º–æ, –µ—Å–ª–∏ –±–æ—Ç –µ—ë —Å–∞–º –∑–∞–≥—Ä—É–∑–∏—Ç, –∞ –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç
            pass

async def move(client: Client, msg: Message, dst: Messageable, interaction: Interaction = None, count: int = 1, delete: bool = True, on_error: Literal['cancel', 'stop', 'skip'] = 'cancel') -> dict[int, list[Message]]:
    """–ü–µ—Ä–µ–Ω–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ –≤–µ—Ç–∫—É."""
    first_send = False
    async def send(content: str) -> None:
        try:
            await interaction.followup.send(ephemeral=True, content=content)
        except Exception as e:
            pass

    if interaction:
        await interaction.response.defer(ephemeral=True, thinking=True)
        print('move', interaction.user.id, msg.id, dst.id, count, delete, on_error, flush=True)

    src = msg.channel
    msgs = {}
    authors = set()
    webhook = await (dst if not isinstance(dst, Thread) else dst.parent).create_webhook(name='–≤–∞–≥–æ–Ω–µ—Ç–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏')

    try:
        try:
            await move_msg(client, msg, webhook, dst, msgs, authors)
        except MoveError as e:
            print('MoveError:', e.msg.id, e.message, flush=True)
            if interaction:
                await send(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {e.msg.id} ({e.message.lower()}), –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É <@512545053223419924>.')
            if on_error != 'skip':
                raise e
        async for m in src.history(limit=count - 1 if count != 0 else None, after=msg):
            try:
                await sleep(1)
                await move_msg(client, m, webhook, dst, msgs, authors)
            except MoveError as e:
                print('MoveError:', e.msg.id, e.message, flush=True)
                if interaction:
                    await send(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {e.msg.id} ({e.message.lower()}), –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É <@512545053223419924>.')
                if on_error != 'skip':
                    raise e
        if interaction and authors:
            msg = await webhook.send(content=', '.join([f'<@{user.id}>' for user in authors]), allowed_mentions=AllowedMentions(users=True), thread=MISSING if not isinstance(dst, Thread) else dst, wait=True)
            await msg.delete()
    except MoveError as e:
        if on_error == 'cancel':
            for msglist in msgs.values():
                for msg in msglist:
                    await msg.delete()
            if interaction:
                await send('–ü–µ—Ä–µ–Ω–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–º–µ–Ω—ë–Ω.' if delete else '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        else:
            if delete:
                for id in msgs:
                    msg = await src.fetch_message(id)
                    await msg.delete()
            if interaction:
                await send(f'–ü–µ—Ä–µ–Ω–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±—ã–ª–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {formatnum(len(msgs))}.' if delete else f'–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –±—ã–ª–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {formatnum(len(msgs))}.')
    else:
        if delete:
            for id in msgs:
                msg = await src.fetch_message(id)
                await msg.delete()
        if interaction:
            await send(f'–ü–µ—Ä–µ–Ω–æ—Å —É—Å–ø–µ—à–µ–Ω, –±—ã–ª–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {formatnum(len(msgs))}.' if delete else f'–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –±—ã–ª–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {formatnum(len(msgs))}.')

    await webhook.delete()

    return msgs

class MoveModal(Modal, title='–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏'):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–Ω–æ—Å–∞."""
    channel=Label(
        text='–ö–∞–Ω–∞–ª/–≤–µ—Ç–∫–∞',
        component=ChannelSelect(
            channel_types=[ChannelType.text, ChannelType.voice, ChannelType.news, ChannelType.stage_voice, ChannelType.news_thread, ChannelType.public_thread, ChannelType.private_thread]
        )
    )

    count=Label(
        text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π',
        description='0 ‚Äî –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ, 1 ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ, 2+ ‚Äî —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∏–∂–µ.',
        component=TextInput(default='0')
    )

    type=Label(
        text='–î–µ–π—Å—Ç–≤–∏–µ',
        component=Select(options=[
            SelectOption(label='–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏', description='–ü–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—å –∏—Ö –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ.', default=True),
            SelectOption(label='–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å', description='–¢–æ–ª—å–∫–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.')
        ])
    )

    onerror=Label(
        text='–ü—Ä–∏ –æ—à–∏–±–∫–µ',
        description='–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.',
        component=Select(options=[
            SelectOption(label='–û—Ç–º–µ–Ω–∏—Ç—å', value='cancel', description='–ü—Ä–æ—Ü–µ—Å—Å –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.', default=True),
            SelectOption(label='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', value='stop', description='–ü—Ä–æ—Ü–µ—Å—Å –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.'),
            SelectOption(label='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', value='skip', description='–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ, –ø—Ä–æ—Ü–µ—Å—Å –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω.')
        ])
    )

    def __init__(self, message: Message):
        super().__init__(timeout=None)
        self.message = message
        self.channel.component.required = True # TODO: temp hack until discord.py 2.6.4

    async def on_submit(self, interaction: Interaction):
        await move(interaction.client, self.message, interaction.client.get_channel(int(self.channel.component.values[0])), interaction, int(self.count.component.value), self.type.component.values[0] == '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏', self.onerror.component.values[0])

async def request_move(interaction: Interaction, message: Message):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞."""
    if interaction.permissions.manage_messages:
        await interaction.response.send_modal(MoveModal(message))
    else:
        await interaction.response.send_message(ephemeral=True, content='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ¬´–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏¬ª –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º —Å–µ—Ä–≤–µ—Ä–∞.')

async def on_ready(_: Client, tree: CommandTree) -> None:
    """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è."""
    tree.context_menu(name='–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏')(request_move)
